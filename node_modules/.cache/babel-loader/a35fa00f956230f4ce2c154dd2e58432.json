{"ast":null,"code":"var _jsxFileName = \"/home/jp4g/Documents/Playgrounds/Blockchains/Ethereum/LootBox/webapp/src/components/TokenExplorer.js\";\nimport React, { Component } from \"react\";\nimport SwordToken from \"./contracts/SwordToken.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport \"./App.css\";\n\nclass TokenExplorer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      contractAddress: '0xa46e52Ff5067098e9F7A3cdA40AA5aDf913d5Eaa',\n      network: 'kovan',\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        const web3 = await getWeb3();\n        const accounts = await web3.eth.getAccounts();\n        const instance = new web3.eth.Contract(SwordToken, contractAddress); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        //this.setState({ web3, accounts, contract: instance }, this.runExample);\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        });\n        console.log(\"Address: \", this.state.accounts[0]);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.set(5).send({\n        from: accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call(); // Update state with the result.\n\n      this.setState({\n        storageValue: response\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Good to Go!\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Your Truffle Box is installed and ready.\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Smart Contract Example\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"If your contracts compiled and migrated successfully, below will show a stored value of 5 (by default).\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Try changing the value stored on \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"line 40\"), \" of App.js.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"The stored value is: \", this.state.storageValue));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/jp4g/Documents/Playgrounds/Blockchains/Ethereum/LootBox/webapp/src/components/TokenExplorer.js"],"names":["React","Component","SwordToken","getWeb3","TokenExplorer","state","storageValue","web3","contractAddress","network","contract","componentDidMount","accounts","eth","getAccounts","instance","Contract","setState","console","log","error","alert","runExample","methods","set","send","from","response","get","call","render","App"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AAEA,OAAO,WAAP;;AAEA,MAAMC,aAAN,SAA4BH,SAA5B,CAAsC;AAAA;AAAA;AAAA,SACpCI,KADoC,GAC5B;AACNC,MAAAA,YAAY,EAAE,CADR;AAENC,MAAAA,IAAI,EAAE,IAFA;AAGNC,MAAAA,eAAe,EAAE,4CAHX;AAINC,MAAAA,OAAO,EAAE,OAJH;AAKNC,MAAAA,QAAQ,EAAE;AALJ,KAD4B;;AAAA,SASpCC,iBAToC,GAShB,YAAY;AAC9B,UAAI;AACF,cAAMJ,IAAI,GAAG,MAAMJ,OAAO,EAA1B;AACA,cAAMS,QAAQ,GAAG,MAAML,IAAI,CAACM,GAAL,CAASC,WAAT,EAAvB;AACA,cAAMC,QAAQ,GAAG,IAAIR,IAAI,CAACM,GAAL,CAASG,QAAb,CAAsBd,UAAtB,EAAkCM,eAAlC,CAAjB,CAHE,CAKF;AACA;AACA;;AACA,aAAKS,QAAL,CAAc;AAAEV,UAAAA,IAAF;AAAQK,UAAAA,QAAR;AAAkBF,UAAAA,QAAQ,EAAEK;AAA5B,SAAd;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB,KAAKd,KAAL,CAAWO,QAAX,CAAoB,CAApB,CAAzB;AACD,OAVD,CAUE,OAAOQ,KAAP,EAAc;AACd;AACAC,QAAAA,KAAK,0EAAL;AAGAH,QAAAA,OAAO,CAACE,KAAR,CAAcA,KAAd;AACD;AACF,KA3BmC;;AAAA,SA6BpCE,UA7BoC,GA6BvB,YAAY;AAAA,0BACQ,KAAKjB,KADb;AAAA,YACfO,QADe,eACfA,QADe;AAAA,YACLF,QADK,eACLA,QADK,EAGvB;;AACA,YAAMA,QAAQ,CAACa,OAAT,CAAiBC,GAAjB,CAAqB,CAArB,EAAwBC,IAAxB,CAA6B;AAAEC,QAAAA,IAAI,EAAEd,QAAQ,CAAC,CAAD;AAAhB,OAA7B,CAAN,CAJuB,CAMvB;;AACA,YAAMe,QAAQ,GAAG,MAAMjB,QAAQ,CAACa,OAAT,CAAiBK,GAAjB,GAAuBC,IAAvB,EAAvB,CAPuB,CASvB;;AACA,WAAKZ,QAAL,CAAc;AAAEX,QAAAA,YAAY,EAAEqB;AAAhB,OAAd;AACD,KAxCmC;AAAA;;AA0CpCG,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKzB,KAAL,CAAWE,IAAhB,EAAsB;AACpB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAAP;AACD;;AACD,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iHAJF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CACmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADnC,gBARF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAA2B,KAAKF,KAAL,CAAWC,YAAtC,CAXF,CADF;AAeD;;AA7DmC;;AAgEtC,eAAeyB,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport SwordToken from \"./contracts/SwordToken.json\";\nimport getWeb3 from \"./utils/getWeb3\";\n\nimport \"./App.css\";\n\nclass TokenExplorer extends Component {\n  state = { \n    storageValue: 0, \n    web3: null, \n    contractAddress: '0xa46e52Ff5067098e9F7A3cdA40AA5aDf913d5Eaa', \n    network: 'kovan',\n    contract: null \n  };\n\n  componentDidMount = async () => {\n    try {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const instance = new web3.eth.Contract(SwordToken, contractAddress);\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      //this.setState({ web3, accounts, contract: instance }, this.runExample);\n      this.setState({ web3, accounts, contract: instance });\n      console.log(\"Address: \", this.state.accounts[0]);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 40</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
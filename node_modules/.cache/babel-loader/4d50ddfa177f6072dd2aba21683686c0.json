{"ast":null,"code":"var _jsxFileName = \"/home/jp4g/Documents/Playgrounds/Blockchains/Ethereum/LootBox/webapp/src/components/TokenExplorer.js\";\nimport React, { Component } from \"react\";\nimport SwordToken from \"../contracts/SwordToken.json\";\nimport NFT from \"../contracts/ERC721Enumerable.json\";\nimport getWeb3 from \"../getWeb3\"; //import \"./App.css\";\n\nclass TokenExplorer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      contractAddress: '0xa46e52Ff5067098e9F7A3cdA40AA5aDf913d5Eaa',\n      network: 'kovan',\n      contractToken: null,\n      contractNFT: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        const web3 = await getWeb3();\n        const accounts = await web3.eth.getAccounts();\n        const token = new web3.eth.Contract(SwordToken, this.state.contractAddress);\n        const nft = new web3.eth.Contract(NFT, this.state.contractAddress); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        //this.setState({ web3, accounts, contract: instance }, this.runExample);\n\n        this.setState({\n          web3,\n          accounts,\n          contractToken: token,\n          contractNFT: nft\n        }, this.totalSupply);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.totalSupply = async () => {\n      const contractNFT = this.state.contractNFT;\n      console.log(contractNFT.address);\n      const supply = await contractNFT.methods.totalSupply().call();\n      console.log(supply);\n    };\n\n    this.runExample = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.set(5).send({\n        from: accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call(); // Update state with the result.\n\n      this.setState({\n        storageValue: response\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"TokenExplorer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Good to Go!\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Your Truffle Box is installed and ready.\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Smart Contract Example\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"If your contracts compiled and migrated successfully, below will show a stored value of 5 (by default).\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Try changing the value stored on \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"line 40\"), \" of App.js.\"));\n  }\n\n} //<div>The stored value is: {this.state.storageValue}</div>\n\n\nexport default TokenExplorer;","map":{"version":3,"sources":["/home/jp4g/Documents/Playgrounds/Blockchains/Ethereum/LootBox/webapp/src/components/TokenExplorer.js"],"names":["React","Component","SwordToken","NFT","getWeb3","TokenExplorer","state","storageValue","web3","contractAddress","network","contractToken","contractNFT","componentDidMount","accounts","eth","getAccounts","token","Contract","nft","setState","totalSupply","error","alert","console","log","address","supply","methods","call","runExample","contract","set","send","from","response","get","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SwordToken from \"../contracts/SwordToken.json\";\nimport NFT from \"../contracts/ERC721Enumerable.json\";\nimport getWeb3 from \"../getWeb3\";\n\n//import \"./App.css\";\n\nclass TokenExplorer extends Component {\n  state = { \n    storageValue: 0, \n    web3: null, \n    contractAddress: '0xa46e52Ff5067098e9F7A3cdA40AA5aDf913d5Eaa', \n    network: 'kovan',\n    contractToken: null,\n    contractNFT: null \n  };\n\n  componentDidMount = async () => {\n    try {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const token = new web3.eth.Contract(SwordToken, this.state.contractAddress);\n      const nft = new web3.eth.Contract(NFT, this.state.contractAddress);\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      //this.setState({ web3, accounts, contract: instance }, this.runExample);\n      this.setState({ web3, accounts, contractToken: token, contractNFT: nft }, this.totalSupply);\n      \n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  totalSupply = async () => {\n    const { contractNFT } = this.state;\n    console.log(contractNFT.address);\n    const supply = await contractNFT.methods.totalSupply().call();\n    console.log(supply);\n  }\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"TokenExplorer\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 40</strong> of App.js.\n        </p>\n        \n      </div>\n    );\n  }\n}\n//<div>The stored value is: {this.state.storageValue}</div>\nexport default TokenExplorer;\n"]},"metadata":{},"sourceType":"module"}
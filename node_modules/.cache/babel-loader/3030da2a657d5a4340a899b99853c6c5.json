{"ast":null,"code":"var _jsxFileName = \"/home/jp4g/Documents/Playgrounds/Blockchains/Ethereum/LootBox/webapp/src/components/TokenExplorer.js\";\nimport React, { Component } from \"react\";\nimport SwordToken from \"../contracts/SwordToken.json\";\nimport getWeb3 from \"../getWeb3\"; //import \"./App.css\";\n\nclass TokenExplorer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      contractAddress: '0xED829b4000C72c57f7b7b11DA9b5706bAD9C9ec0',\n      network: 'kovan',\n      contractToken: null,\n      supply: 0\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        const web3 = await getWeb3();\n        const accounts = await web3.eth.getAccounts();\n        const token = new web3.eth.Contract(SwordToken, this.state.contractAddress);\n        this.setState({\n          web3,\n          accounts,\n          contractToken: token\n        });\n        this.setState(this.totalSupply);\n        console.log(this.state.supply);\n      } catch (error) {\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.totalSupply = async () => {\n      try {\n        const _this$state = this.state,\n              contractToken = _this$state.contractToken,\n              web3 = _this$state.web3;\n        const supplyPromise = await contractToken.methods.totalSupply().call();\n        const supply = await web3.utils.hexToNumber(supplyPromise._hex);\n        this.setState({\n          supply\n        });\n      } catch (error) {\n        alert(\"Failed to get toal SwordToken supply!\");\n        console.log(error);\n      }\n    };\n\n    this.balanceOf = async address => {\n      try {\n        const _this$state2 = this.state,\n              contractToken = _this$state2.contractToken,\n              web3 = _this$state2.web3;\n        const supplyPromise = await contractToken.methods.balaceOf(address).call();\n        const supply = await web3.utils.hexToNumber(supplyPromise._hex); //return supply;\n      } catch (error) {\n        alert(\"Failed to get toal SwordToken supply!\");\n        console.log(error);\n      }\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"TokenExplorer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"ISA481 LootBox\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Sword Token Explorer\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Development environment for LootBox\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"The total supply is: \", this.state.supply), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"The connected account is: \", this.state.accounts[0], \" \"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"The connected account has a balance of: \", this.state.balanceOf(this.state.accounts[0])));\n  }\n\n} //<div>The stored value is: {this.state.storageValue}</div>\n\n\nexport default TokenExplorer;","map":{"version":3,"sources":["/home/jp4g/Documents/Playgrounds/Blockchains/Ethereum/LootBox/webapp/src/components/TokenExplorer.js"],"names":["React","Component","SwordToken","getWeb3","TokenExplorer","state","storageValue","web3","contractAddress","network","contractToken","supply","componentDidMount","accounts","eth","getAccounts","token","Contract","setState","totalSupply","console","log","error","alert","supplyPromise","methods","call","utils","hexToNumber","_hex","balanceOf","address","balaceOf","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SwordToken from \"../contracts/SwordToken.json\";\nimport getWeb3 from \"../getWeb3\";\n\n//import \"./App.css\";\n\nclass TokenExplorer extends Component {\n  state = { \n    storageValue: 0, \n    web3: null, \n    contractAddress: '0xED829b4000C72c57f7b7b11DA9b5706bAD9C9ec0', \n    network: 'kovan',\n    contractToken: null,\n    supply: 0\n  };\n\n  componentDidMount = async () => {\n    try {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const token = new web3.eth.Contract(SwordToken, this.state.contractAddress);\n      this.setState({ web3, accounts, contractToken: token }); \n      this.setState(this.totalSupply);\n      console.log(this.state.supply)\n    } catch (error) {\n      alert(`Failed to load web3, accounts, or contract. Check console for details.`,);\n      console.error(error);\n    }\n  };\n\n  totalSupply = async () => {\n    try {\n      const { contractToken, web3 } = this.state;\n      const supplyPromise = await contractToken.methods.totalSupply().call();\n      const supply = await web3.utils.hexToNumber(supplyPromise._hex);\n      this.setState({ supply });\n    } catch (error) {\n      alert(`Failed to get toal SwordToken supply!`);\n      console.log(error);\n    }\n  }\n\n  balanceOf = async (address) => {\n    try {\n      const { contractToken, web3 } = this.state;\n      const supplyPromise = await contractToken.methods.balaceOf(address).call();\n      const supply = await web3.utils.hexToNumber(supplyPromise._hex);\n      //return supply;\n    } catch (error) {\n      alert(`Failed to get toal SwordToken supply!`);\n      console.log(error);\n    }\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"TokenExplorer\">\n        <h1>ISA481 LootBox</h1>\n        <h2>Sword Token Explorer</h2>\n        <p>\n          Development environment for LootBox\n        </p>\n        <div>The total supply is: {this.state.supply}</div>\n        <div>The connected account is: {this.state.accounts[0]} </div>\n        <div>The connected account has a balance of: { this.state.balanceOf(this.state.accounts[0]) }</div>\n      </div>\n    );\n  }\n}\n//<div>The stored value is: {this.state.storageValue}</div>\nexport default TokenExplorer;\n"]},"metadata":{},"sourceType":"module"}